#!/usr/bin/env python3
# author: @whattheslime
from argparse import ArgumentParser, Namespace
from pathlib import Path
from urllib.parse import urljoin
from zipfile import ZipFile

from lib.args import (
    add_output_args, add_plugins_arg, add_session_args, load_plugins
)
from lib.interrupt import sigint_handler
from lib.session import http_session
from lib.logger import Progress, info, warn


#: ASCII art logo.
logo = """
  \033[34;1m__      __\033[94m     ____     _    
  \033[34;1m\ \    / / __\033[94m /  __|___| |_  
   \033[34;1m\ \/\/ / '_ \\\033[94m  (_ / -_)  _|
    \033[34;1m\_/\_/| .__/\033[94m\____\___|\__| 
          \033[34m|_|\033[0m     @whattheslime   
"""

#: Default archives directory path.
default_output = Path(__file__).parent / "archives"

def parse_args() -> Namespace:
    """Function to parse user arguments."""
    parser = ArgumentParser()

    add_plugins_arg(parser)
    add_session_args(parser)
    add_output_args(parser, default_output)

    return parser.parse_args()


def main():
    """Program entry point."""
    # Set signal interrupt handler.
    sigint_handler()


    url = "https://downloads.wordpress.org/plugin/"
    # Parse user arguments.
    args = parse_args()

    plugins = load_plugins(args.plugins)

    with http_session(args.headers, args.proxy) as session:
        with Progress(len(plugins)) as progress:
            for slug, version in plugins:
                plugin = f"{slug}.{version}.zip"
                archive = args.output / plugin

                if archive.exists():
                    info(f"{plugin} exists. Skiped!")
                    continue

                response = session.get(urljoin(url, plugin))
                
                if response.status_code == 200:
                    with open(archive, "wb") as file:
                        file.write(response.content)

                    info(f"{plugin} downloaded!")

                    with ZipFile(archive, "r") as zipfile:
                        zipfile.extractall(args.output)

                    info(f"{plugin} downloaded!")
                else:
                    warn(f"{archive.name} extracted! ({response.status_code})")

                progress.update()

if __name__ == "__main__":
    print(logo)
    main()